{
  "props": {
    "attach": "Specifies which DOM element that this component should detach to. String can be any valid querySelector and Object can be any valid Node. This will attach to the root `v-app` component by default.",
    "autocomplete": "Filter the items in the list based on user input",
    "cacheItems": "Keeps a local _unique_ copy of all items that have been passed through the **items** prop.",
    "chips": "Changes display of selections to chips",
    "combobox": "The single select variant of **tags**",
    "dark": "Applies the dark theme variant to the component. This will default the components color to _white_ unless you've configured your [application theme](/customization/theme) to **dark** or if you are using the **color** prop on the component. You can find more information on the Material Design documentation for [dark themes](https://material.io/design/color/dark-theme.html).",
    "debounceSearch": "Debounces the search input value being emitted",
    "deletableChips": "Adds a remove icon to selected chips",
    "disabled": "Disables the input",
    "disableLookup": "Disables keyboard lookup",
    "eager": "Will force the components content to render on mounted. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO.",
    "editable": " Creates an editable button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "filter": "The function used for filtering items",
    "hideSelected": "Do not display in the select menu items that are already selected",
    "itemColor": "Sets color of selected items",
    "itemDisabled": "Set property of **items**'s disabled value",
    "items": "Can be an array of objects or array of strings. When using objects, will look for a title, value and disabled keys. This can be changed using the **item-title**, **item-value** and **item-disabled** props.  Objects that have a **header** or **divider** property are considered special cases and generate a list header or divider; these items are not selectable.",
    "itemText": "Set property of **items**'s title value",
    "itemValue": "Set property of **items**'s value - **must be primitive**. Dot notation is supported. **Note:** This is currently not supported with `v-combobox` [GitHub Issue](https://github.com/vuetifyjs/vuetify/issues/5479)",
    "menuProps": "Pass props through to the `v-menu` component. Accepts either a string for boolean props `menu-props=\"auto, overflowY\"`, or an object `:menu-props=\"{ auto: true, overflowY: true }\"`",
    "minWidth": "Sets the minimum width of the select's `v-menu` content",
    "multiple": "Changes select to multiple. Accepts array for value",
    "multiLine": "Causes label to float when the select component is focused or dirty",
    "noDataText": "Display text when there is no data",
    "openOnClear": "When using the **clearable** prop, once cleared, the select menu will either open or stay open, depending on the current state",
    "overflow": "Creates an overflow button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "returnObject": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**",
    "searchInput": "Use the **.sync** modifier to catch user input from the search input",
    "segmented": "Creates a segmented button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "smallChips": "Changes display of selections to chips with the **small** property",
    "tags": "Tagging functionality, allows the user to create new values not available from the **items** prop",
    "valueComparator": "The comparison algorithm used for values. [More info](https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts)",
    "label": "MISSING DESCRIPTION",
    "type": "MISSING DESCRIPTION",
    "autofocus": "MISSING DESCRIPTION",
    "hint": "MISSING DESCRIPTION",
    "persistentHint": "MISSING DESCRIPTION",
    "prefix": "MISSING DESCRIPTION",
    "placeholder": "MISSING DESCRIPTION",
    "persistentPlaceholder": "MISSING DESCRIPTION",
    "persistentCounter": "MISSING DESCRIPTION",
    "suffix": "MISSING DESCRIPTION",
    "id": "MISSING DESCRIPTION",
    "appendIcon": "MISSING DESCRIPTION",
    "prependIcon": "MISSING DESCRIPTION",
    "messages": "MISSING DESCRIPTION",
    "direction": "MISSING DESCRIPTION",
    "density": "MISSING DESCRIPTION",
    "error": "MISSING DESCRIPTION",
    "errorMessages": "MISSING DESCRIPTION",
    "maxErrors": "MISSING DESCRIPTION",
    "name": "MISSING DESCRIPTION",
    "rules": "MISSING DESCRIPTION",
    "validateOn": "MISSING DESCRIPTION",
    "validationValue": "MISSING DESCRIPTION",
    "focused": "MISSING DESCRIPTION",
    "reverse": "MISSING DESCRIPTION",
    "hideDetails": "MISSING DESCRIPTION",
    "appendInnerIcon": "MISSING DESCRIPTION",
    "bgColor": "MISSING DESCRIPTION",
    "clearable": "MISSING DESCRIPTION",
    "clearIcon": "MISSING DESCRIPTION",
    "active": "MISSING DESCRIPTION",
    "color": "MISSING DESCRIPTION",
    "dirty": "MISSING DESCRIPTION",
    "persistentClear": "MISSING DESCRIPTION",
    "prependInnerIcon": "MISSING DESCRIPTION",
    "singleLine": "MISSING DESCRIPTION",
    "variant": "MISSING DESCRIPTION",
    "theme": "MISSING DESCRIPTION",
    "loading": "MISSING DESCRIPTION",
    "counter": "MISSING DESCRIPTION",
    "counterValue": "MISSING DESCRIPTION"
  },
  "slots": {
    "append-item": "Adds an item after menu content",
    "item": "Define a custom item appearance",
    "prepend-item": "Adds an item before menu content",
    "selection": "Define a custom selection appearance",
    "prepend": "MISSING DESCRIPTION",
    "append": "MISSING DESCRIPTION",
    "details": "MISSING DESCRIPTION",
    "clear": "MISSING DESCRIPTION",
    "prepend-inner": "MISSING DESCRIPTION",
    "append-inner": "MISSING DESCRIPTION",
    "label": "MISSING DESCRIPTION",
    "loader": "MISSING DESCRIPTION",
    "chip": "MISSING DESCRIPTION",
    "no-data": "MISSING DESCRIPTION"
  },
  "events": {
    "update:list-index": "Emitted when menu item is selected using keyboard arrows",
    "update:search-input": "The `search-input.sync` event",
    "click:prepend": "MISSING DESCRIPTION",
    "click:append": "MISSING DESCRIPTION",
    "click:clear": "MISSING DESCRIPTION",
    "click:appendInner": "MISSING DESCRIPTION",
    "click:prependInner": "MISSING DESCRIPTION",
    "click:control": "MISSING DESCRIPTION",
    "click:input": "MISSING DESCRIPTION",
    "update:focused": "MISSING DESCRIPTION",
    "update:modelValue": "MISSING DESCRIPTION",
    "update:menu": "MISSING DESCRIPTION"
  },
  "exposed": {
    "menu": "MISSING DESCRIPTION",
    "select": "MISSING DESCRIPTION"
  }
}